//
//  shared-header.pch
//  leetcode
//
//  Created by jeswang on 7/11/14.
//
//

#ifndef leetcode_shared_header_pch
#define leetcode_shared_header_pch

#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <unordered_map>
#include <set>
#include <stack>
#include <unordered_set>
#include <sstream>
#include <cstdlib>
using namespace std;

#define foreach(container,it) \
for(typeof((container).begin()) it = (container).begin();it!=(container).end();++it)

#define foreach2(container,it) \
for(auto it = (container).begin();it!=(container).end();)


struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

ListNode *listFromString(string des) {
    if (des == "NULL") {
        return NULL;
    }
    
    string remain = des;
    int number;
    size_t found = des.find("->");
    
    ListNode *rootNode = NULL, *nextNode = NULL, *previousNode = NULL;
    while (found != string::npos){
        number = stoi(remain.substr(0, found));
        
        nextNode = new ListNode(number);
        if (rootNode == NULL) {
            rootNode = nextNode;
        }
        else {
            previousNode->next = nextNode;
        }
        previousNode = nextNode;

        remain = remain.substr(found + 2, remain.size() - found - 2);
        found = remain.find("->");
    }
    
    number = stoi(remain);
    if (rootNode == NULL) {
        return new ListNode(number);
    }
    else {
        nextNode = new ListNode(number);
        previousNode->next = nextNode;
    }
    return rootNode;
}

string stringFromList(ListNode *rootNode) {
    if (rootNode == NULL) {
        return "NULL";
    }
    
    stringstream ss;
    ss<<rootNode->val;
    
    ListNode *nextNode = rootNode->next;
    while (nextNode != NULL) {
        ss<<"->"<<nextNode->val;
        nextNode = nextNode->next;
    }
    
    string res;
    ss>>res;
    
    return res;
}


string stringFromTree(TreeNode *p) {
    if (!p) {
        return "# ";
    } else {
        string res;
        res = to_string(p->val) + " ";
        res += stringFromTree(p->left);
        res += stringFromTree(p->right);
        return res;
    }
}

TreeNode* treeFromString(string& des) {
    if (des.size()==0) {
        return NULL;
    }
    
    if (des[0] == ' ') {
        des = des.substr(1, des.size()-1);
    }
    
    if(des[0] == '#'){
        des = des.substr(min(2, (int)des.size()), max(0, (int)(des.size()-2)) );
        return NULL;
    }
    
    int token;
    stringstream ss;
    ss<<des;
    ss>>token;
    
    std::stringstream tmp;
    tmp << ss.rdbuf();
    des = tmp.str();
    
    TreeNode *root = new TreeNode(token);
    
    root->left = treeFromString(des);
    root->right = treeFromString(des);
    
    return root;
}

#endif
